# -*- coding: utf-8 -*-
"""MLOPS2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NcYFPjSiPzZPQpQfoZvdEFfaE2gfFDAt
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from gensim.models import Word2Vec

# Load the data into a pandas DataFrame
df = pd.read_csv("Anime_data.csv")
df =df.dropna()

# Convert the genre, producer and studio values into lists
df["Genre"] = df["Genre"].apply(lambda x: x[1:-1].split(", "))
df["Producer"] = df["Producer"].apply(lambda x: x[1:-1].split(", "))
df["Studio"] = df["Studio"].apply(lambda x: x[1:-1].split(", "))

# Use Word2Vec to vectorize the genre, producer and studio columns
model_genre = Word2Vec(df["Genre"], size=5, window=5, min_count=1)
model_producer = Word2Vec(df["Producer"], size=5, window=5, min_count=1)
model_studio = Word2Vec(df["Studio"], size=5, window=5, min_count=1)

# Get the vector representations of the genres, producers, and studios
df["Genre"] = df["Genre"].apply(lambda x: np.mean([model_genre.wv[g] for g in x], axis=0))
df["Producer"] = df["Producer"].apply(lambda x: np.mean([model_producer.wv[p] for p in x], axis=0))
df["Studio"] = df["Studio"].apply(lambda x: np.mean([model_studio.wv[s] for s in x], axis=0))

#convert each list of arrays into a 2D numpy array
df["Genre"] = np.vstack(df["Genre"].to_numpy())
df["Producer"] = np.vstack(df["Producer"].to_numpy())
df["Studio"] = np.vstack(df["Studio"].to_numpy())



# Convert the text data into numerical representations
vectorizer = TfidfVectorizer()
title_vectors = vectorizer.fit_transform(df["Title"])
df["Title"] = title_vectors.getnnz(axis=1)

synopsis_vectors = vectorizer.fit_transform(df["Synopsis"])
df["Synopsis"] = synopsis_vectors.getnnz(axis=1)

#manage the type column that is a categorical feature
le = LabelEncoder()
df["Type"] = le.fit_transform(df["Type"])

# Bin the target variable into 5 categorical bins
df['Rating'] = pd.cut(df['Rating'], bins=[0, 2, 4, 6, 8, 10], labels=[1, 2, 3, 4, 5], include_lowest=True)
# Convert the binned target variable into categorical data
df['Rating'] = df['Rating'].astype('category')

df.head()

# Split the data into training and testing sets
X = df[["Title", "Genre", "Synopsis", "Type", "Producer", "Studio"]]
y = df["Rating"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the random forest classifier on the training set
model = RandomForestClassifier()
model.fit(X_train, y_train)

# Evaluate the model on the testing set
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

df3 = pd.read_csv("Anime_data.csv")
df3.dtypes

import ast
new_data = {
    'Title': ["My Hero Academia Season 4", "Attack on Titan Season 4", "FullMetal Alchemist: Brotherhood"],
    'Genre': ["Action, Adventure, Superhero", "Action, Drama, Fantasy", "Adventure, Drama, Fantasy, Science fiction"],
    'Synopsis': ["The story follows a young boy named Izuku Midoriya who dreams of becoming a hero in a world where most people possess powers known as Quirks. Despite being born without a Quirk, he is scouted by the world's greatest hero and enrolls in a school for professional heroes.",                "Several hundred years ago, humans were nearly exterminated by Titans. Titans are typically several stories tall, and seem to have no intelligence, devouring human beings and other creatures on sight. A small percentage of humanity survived by walling themselves in a city protected by extremely high walls, even taller than the biggest of Titans.",                "The story is set in a fictional universe in which alchemy is one of the most advanced scientific techniques known to man. It follows two alchemist brothers named Edward and Alphonse Elric who, after a failed attempt to bring their deceased mother back to life using alchemy, set out on a journey to find the Philosopher's Stone, hoping to restore their bodies to their original forms."],
    'Type': ["TV", "TV", "TV"],
    'Producer': ["Funimation, MBS, Dentsu", "Wit Studio, Hajime Isayama, Production I.G", "Aniplex, Square Enix, Mainichi Broadcasting System"],
    'Studio': ["Bones, MBS", "Wit Studio, Production I.G", "Aniplex, Bones"],
}

for key, value in new_data.items():
    if key in ["Genre", "Producer", "Studio"]:
        for i in range(len(value)):
            new_data[key][i] = value[i].split(", ")
    
new_df = pd.DataFrame(new_data)


# Get the vector representations of the genres, producers, and studios using the previously trained Word2Vec models
new_df["Genre"] = new_df["Genre"].apply(lambda x: np.mean([model_genre.wv[g] for g in x], axis=0))
new_df["Producer"] = new_df["Producer"].apply(lambda x: np.mean([model_producer.wv[p] for p in x], axis=0))
new_df["Studio"] = new_df["Studio"].apply(lambda x: np.mean([model_studio.wv[s] for s in x], axis=0))

#convert each list of arrays into a 2D numpy array
new_df["Genre"] = np.vstack(new_df["Genre"].to_numpy())
new_df["Producer"] = np.vstack(new_df["Producer"].to_numpy())
new_df["Studio"] = np.vstack(new_df["Studio"].to_numpy())


# Convert the text data into numerical representations
title_vectors = vectorizer.transform(new_df["Title"])
new_df["Title"] = title_vectors.getnnz(axis=1)

synopsis_vectors = vectorizer.transform(new_df["Synopsis"])
new_df["Synopsis"] = synopsis_vectors.getnnz(axis=1)

#manage the type column that is a categorical feature
new_df["Type"] = le.transform(new_df["Type"])

# Bin the target variable into 5 categorical bins
new_df['Rating'] = pd.cut(new_df['Rating'], bins=[0, 2, 4, 6, 8, 10], labels=[1, 2, 3, 4, 5], include_lowest=True)
# Convert the binned target variable into categorical data
new_df['Rating'] = new_df['Rating'].astype('category')


# Get the input features for the new data
new_X = new_df[["Title", "Genre", "Synopsis", "Type", "Producer", "Studio"]]

# Use the trained model to make predictions on the new data
new_y_pred = model.predict(new_X)

new_data = {
    'Title': ["My Hero Academia Season 4", "Attack on Titan Season 4", "FullMetal Alchemist: Brotherhood"],
    'Genre': ["'Action', 'Adventure', 'Superhero'", "'Action', 'Drama', 'Fantasy'", "'Adventure', 'Drama', 'Fantasy', 'Science fiction'"],
    'Synopsis': ["The story follows a young boy named Izuku Midoriya who dreams of becoming a hero in a world where most people possess powers known as Quirks. Despite being born without a Quirk, he is scouted by the world's greatest hero and enrolls in a school for professional heroes.",                "Several hundred years ago, humans were nearly exterminated by Titans. Titans are typically several stories tall, and seem to have no intelligence, devouring human beings and other creatures on sight. A small percentage of humanity survived by walling themselves in a city protected by extremely high walls, even taller than the biggest of Titans.",                "The story is set in a fictional universe in which alchemy is one of the most advanced scientific techniques known to man. It follows two alchemist brothers named Edward and Alphonse Elric who, after a failed attempt to bring their deceased mother back to life using alchemy, set out on a journey to find the Philosopher's Stone, hoping to restore their bodies to their original forms."],
    'Type': ["TV", "TV", "TV"],
    'Producer': ["Funimation, MBS, Dentsu", "Wit Studio, Hajime Isayama, Production I.G", "Aniplex, Square Enix, Mainichi Broadcasting System"],
    'Studio': ["Bones, MBS", "Wit Studio, Production I.G", "Aniplex, Bones"],
}

new_df = pd.DataFrame(new_data)
def convert_to_list(value):
    return value.split(", ")

new_df["Genre"] = new_df["Genre"].apply(convert_to_list)
new_df["Producer"] = new_df["Producer"].apply(convert_to_list)
new_df["Studio"] = new_df["Studio"].apply(convert_to_list)

new_df.head()

a="bonjour,hello,morning"
print(a.split(","))